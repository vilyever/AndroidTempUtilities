ext {
    buildVersionName = {
        "0.0.1"
    }
    
    /**
     * Builds an Android version code from the version of the project.
     * This is designed to handle the -SNAPSHOT and -RC format.
     *
     * I.e. during development the version ends with -SNAPSHOT. As the code stabilizes and release nears
     * one or many Release Candidates are tagged. These all end with "-RC1", "-RC2" etc.
     * And the final release is without any suffix.
     * @return
     */
    buildVersionCode = {
        //The rules is as follows:
        //-SNAPSHOT counts as 0
        //-RC* counts as the RC number, i.e. 1 to 98
        //final release counts as 99.
        //Thus you can only have 98 Release Candidates, which ought to be enough for everyone

        def candidate = "0"
        def (major, minor, patch) = buildVersionName().toLowerCase().replaceAll('-', '').tokenize('.')
        if (patch.endsWith("snapshot")) {
            candidate = "0"
            patch = patch.replaceAll("[^0-9]","")
        } else {
            def rc
            (patch, rc) = patch.tokenize("rc")
            if (rc) {
                candidate = rc
            }
        }

        (major, minor, patch, candidate) = [major, minor, patch, candidate].collect{it.toInteger()}

        (major * 1000 * 1000 * 1000) + (minor * 1000 * 1000) + (patch * 1000) + candidate;
    }
}

android {
    signingConfigs {
        debug {
            storeFile file("../${rootProject.getName()}_debug.jks")
            storePassword '888888'
            keyAlias 'debug'
            keyPassword '888888'
        }
        release {
            storeFile file("../${rootProject.getName()}_release.jks")
            storePassword '******'
            keyAlias 'release'
            keyPassword '******'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        variant.mergedFlavor.versionCode = buildVersionCode()
        variant.mergedFlavor.versionName = buildVersionName()

        variant.outputs.each { output ->

            if ("${variant.dirName}".contains("debug")) {
                output.processManifest.doLast {
                    def manifestOutFile = output.processManifest.manifestOutputFile

                    def activities = manifestOutFile.getText('UTF-8').split("<activity")
                    def newFileContents = ""

                    for (def activity : activities) {
                        if (!activity.contains("<manifest")) {
                            if (activity.contains("exported")) {
                                activity = activity.replace("android:exported=\"false\"", "android:exported=\"true\"")
                            } else {
                                activity = "\n            android:exported=\"true\"" + activity
                            }
                        }

                        newFileContents = newFileContents + activity
                        if (!activity.contains("</manifest>")) {
                            newFileContents = newFileContents + "<activity"
                        }
                    }

                    manifestOutFile.write(newFileContents, 'UTF-8')
                }
            }
        }
    }
}


import groovy.swing.SwingBuilder
gradle.taskGraph.whenReady { taskGraph ->
    if(taskGraph.hasTask(":${project.name}:assembleRelease")) {
        def password = ''
        if(System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                        title: 'Enter signing password', // Dialog title
                        alwaysOnTop: true, // pretty much what the name says
                        resizable: false, // Don't allow the user to resize the dialog
                        locationRelativeTo: null, // Place dialog in center of the screen
                        pack: true, // We need to pack the dialog (so it will take the size of it's children)
                        show: true // Let's show it
                ) {
                    vbox { // Put everything below each other
                        label(text: "Please enter signing passphrase:")
                        input = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            password = input.password; // Set pass variable to value of input field
                            password = new String(password)
                            dispose(); // Close dialog
                        })
                    } // vbox end
                } // dialog end
            } // edt end
        } else {
            password = System.console().readPassword("\nPlease enter signing passphrase: ")
            password = new String(password)
        }

        if(password.size() <= 0) {
            throw new InvalidUserDataException("You must enter a signing password to proceed.")
        }

        android.signingConfigs.release.storePassword = password
        android.signingConfigs.release.keyPassword = password
    } // end if has task
} // end whenReady


task makeApk(type: Copy, dependsOn: ['assembleRelease']) {
}

assembleRelease.doLast {
    copy {
        // copy apk
        def originalApkName = "${project.getName()}-release.apk"
        def apkName = "${rootProject.getName()}_release_${buildVersionName()}.apk"

        File archiveDir = new File(rootDir, "archive")
        File apkDir = new File(archiveDir, buildVersionName())
        if (apkDir.exists() && apkDir.isDirectory()) {
            apkDir.deleteDir()
        }

        apkDir.mkdirs();

        from("build/outputs/apk/${project.getName()}-release.apk")
        into("../archive/${buildVersionName()}")
        rename(originalApkName, apkName)

        // append README
        File readme = new File(rootDir, "README.md")
        def content = readme.getText("UTF-8")
        content = content.replace("# 版本简述", "# 版本简述\n## ${buildVersionName()}[【Download apk】](archive/${buildVersionName()}/${rootProject.getName()}_release_${buildVersionName()}.apk)\n\n")
        readme.write(content, "UTF-8")
    }

}

task eclipsify {
    // Code that goes here is *configuring* the task, and will
    // get evaluated on *every* build invocation, no matter
    // which tasks Gradle eventually decides to execute.
    // Don't do anything time-consuming here.
    doLast {
        // `doLast` adds a so-called *task action* to the task.
        // The code inside the task action(s) defines the task's behavior.
        // It will only get evaluated if and when Gradle decides to
        // execute the task.
        exec { commandLine = ["./play1.3.x/play", "eclipsify"] }
    }
}

// Improving on the previous task declaration, let's now use a *task type*
// (see `type: Exec` below). Task types come with a predefined task action,
// so it's typically not necessary to add one yourself. Also, many task types
// predefine task inputs and outputs, which allows Gradle to check if the task
// is up-to-date. Another advantage of task types is that they allow for
// better tooling support (e.g. auto-completion of task properties).
task precompile(type: Exec) {
    // Since this task already has a task action, we only
    // need to configure it.
    println 'precompile'
    commandLine = ["./play1.3.x/play", "precompile"]
}

task hello() {
    println 'hello'

    hello4()


    doLast {
        println 'hello 111'
        hello4()
    }
}

task quickHello << {
    println 'quickHello 111'
    hello4()
}



task hello2() {
    println 'hello2'
    doLast {
        println 'hello 222'
    }
}
task hello3() {
    println 'hello3'
    doLast {
        println 'hello 333'
    }
}

void hello4() {
    println 'hello4'
}

//hello3.shouldRunAfter hello
//hello.shouldRunAfter hello3